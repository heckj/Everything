%{
from collections import namedtuple
Style = namedtuple('Style', ['name', 'availability', 'unavailable'])
styles = [
    Style(name='ButtonStyle', availability=['macOS 10.15', 'iOS 13.0'], unavailable=[]),
    Style(name='ControlGroupStyle', availability=['macOS 10.15', 'iOS 13.0', 'tvOS 17.0'], unavailable=[]),
    Style(name='DatePickerStyle', availability=['macOS 13', 'iOS 16.0'], unavailable=['tvOS']),
    Style(name='DisclosureGroupStyle', availability=['macOS 13', 'iOS 16.0'], unavailable=['tvOS']),
    Style(name='FormStyle', availability=['macOS 13', 'iOS 16.0'], unavailable=[]),
    Style(name='GaugeStyle', availability=['macOS 13', 'iOS 16.0'], unavailable=['tvOS']),
    Style(name='GroupBoxStyle', availability=['macOS 10.15', 'iOS 13.0'], unavailable=['tvOS']),
    Style(name='LabelStyle', availability=['macOS 10.15', 'iOS 13.0'], unavailable=[]),
    Style(name='LabeledContentStyle', availability=['macOS 13', 'iOS 16.0'], unavailable=[]),
    # Style(name='ListStyle', availability='?', unavailable=[]),
    # Style(name='MenuBarExtraStyle', availability='?', unavailable=[]),
    # Style(name='MenuButtonStyle', availability='?', unavailable=[]),
    Style(name='MenuStyle', availability=['macOS 10.15', 'iOS 13.0', 'tvOS 17.0'], unavailable=[]),
    Style(name='NavigationSplitViewStyle', availability=['macOS 13', 'iOS 16.0'], unavailable=[]),
    # Style(name='PickerStyle', availability='?', unavailable=[]),
    # Style(name='PrimitiveButtonStyle', availability='?', unavailable=[]),
    Style(name='ProgressViewStyle', availability=['macOS 10.15', 'iOS 13.0'], unavailable=[]),
    # Style(name='ShapeStyle', availability='?', unavailable=[]),
    # Style(name='TabViewStyle', availability='?', unavailable=[]),
    Style(name='TableStyle', availability=['macOS 12', 'iOS 16.0'], unavailable=['tvOS']),
    # Style(name='TextFieldStyle', availability='?', unavailable=[]),
    Style(name='ToggleStyle', availability=['macOS 10.15', 'iOS 13.0'], unavailable=[]),
    # Style(name='WindowStyle', availability='?', unavailable=[]),
    # Style(name='WindowToolbarStyle', availability='?', unavailable=[]),
]

def lower(name):
    return name[0].lower() + name[1:]
}%

import SwiftUI

% for style in styles:

/// A type-erased `${style.name}`.
///
/// Allows creation of type-erased `${style.name}` using a closure to create the style's body.
% for availability in style.availability:
@available(${availability}, *)
% end
% for unavailable in style.unavailable:
@available(${unavailable}, unavailable)
% end
public struct Any${style.name} <Body>: ${style.name} where Body: View {
    let body: (Configuration) -> Body

    public init(_ body: @escaping (Configuration) -> Body) {
        self.body = body
    }

    public func makeBody(configuration: Configuration) -> some View {
        body(configuration)
    }
}

% for availability in style.availability:
@available(${availability}, *)
% end
% for unavailable in style.unavailable:
@available(${unavailable}, unavailable)
% end
public extension View {
    /// Modify the `${lower(style.name)}` style via a closure.
    func ${lower(style.name)}<B>(_ body: @escaping (Any${style.name}<B>.Configuration) -> B) -> some View where B: View {
        ${lower(style.name)}(Any${style.name}(body))
    }
}

// MARK: -

% end
